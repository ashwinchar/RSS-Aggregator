import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program aggregates multiple XML RSS (version 2.0) feeds from a given URL into
 * the corresponding HTML output file inputed by the user.
 *
 * @author Ashwin Char
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        String title = "";
        String description = "";
        out.println("<html>");
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() == 0) {
            title = "Empty Title";
        } else {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        }
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\""
                + channel.child(getChildElement(channel, "link")).child(0)
                        .label()
                + "\">" + channel.child(getChildElement(channel, "title"))
                        .child(0).label()
                + "</a></h1>");
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() == 0) {
            description = "No Description";
        } else {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("<tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        boolean isFound = false;
        int index = 0;
        while (!isFound && index < xml.numberOfChildren()) {
            if (xml.child(index).label().equals(tag)
                    && xml.child(index).isTag()) {
                isFound = true;
            } else {
                index++;
            }
        }
        if (!isFound) {
            index = -1;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        if (getChildElement(item, "pubDate") >= 0) {
            out.println("<td>" + item.child(getChildElement(item, "pubDate"))
                    .child(0).label() + "</td>");
        } else {
            out.println("<td>" + "No date available" + "</td>");
        }
        if (getChildElement(item, "source") >= 0) {
            if (item.child(getChildElement(item, "source"))
                    .hasAttribute("url")) {
                out.println("<td><a href=\""
                        + item.child(getChildElement(item, "source"))
                                .attributeValue("url")
                        + "\">");
                if (item.child(getChildElement(item, "source"))
                        .numberOfChildren() > 0) {
                    if (!item.child(getChildElement(item, "source")).child(0)
                            .isTag()) {
                        out.print(item.child(getChildElement(item, "source"))
                                .child(0).label());
                    }
                } else {
                    out.print("No Text");
                }
                out.print("</a></td>");
            } else {
                out.println("<td>" + item.child(getChildElement(item, "source"))
                        .child(0).label() + "</td>");
            }
        } else {
            out.println("<td>" + "No source available" + "</td>");
        }
        out.print("<td>");
        if (getChildElement(item, "link") >= 0) {
            out.print("<a href=\""
                    + item.child(getChildElement(item, "link")).child(0).label()
                    + "\">");
        }
        if (getChildElement(item, "title") >= 0) {
            if (item.child(getChildElement(item, "title"))
                    .numberOfChildren() > 0) {
                if (!item.child(getChildElement(item, "title")).child(0)
                        .isTag()) {
                    out.print(item.child(getChildElement(item, "title"))
                            .child(0).label());
                }
            } else {
                out.print("No title available");
            }
        } else if (getChildElement(item, "description") >= 0) {
            if (item.child(getChildElement(item, "description"))
                    .numberOfChildren() > 0) {
                if (!item.child(getChildElement(item, "description")).child(0)
                        .isTag()) {
                    out.print(item.child(getChildElement(item, "description"))
                            .child(0).label());
                }
            } else {
                out.print("No description available");
            }
        } else {
            out.print("No title available");
        }
        if (getChildElement(item, "link") >= 0) {
            out.println("</a></td>");
        } else {
            out.println("</td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        SimpleWriter output = new SimpleWriter1L(file);
        output.print("<html> <head> <title>" + xml.attributeValue("title")
                + "</title>");
        output.println("</head> <body>");
        output.println("<h2>" + xml.attributeValue("title") + "</h2>");
        output.println("<ul>");
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals("feed")) {
                if (xml.child(i).hasAttribute("url")) {
                    if (xml.child(i).hasAttribute("name")) {
                        if (xml.child(i).hasAttribute("file")) {
                            SimpleWriter fileContent = new SimpleWriter1L(
                                    xml.child(i).attributeValue("file"));
                            XMLTree urlTree = new XMLTree1(
                                    xml.child(i).attributeValue("url"));
                            output.println("<li> <a href=\""
                                    + xml.child(i).attributeValue("file")
                                    + "\">"
                                    + xml.child(i).attributeValue("name")
                                    + "</a></li>");
                            outputHeader(urlTree.child(0), fileContent);
                            for (int j = 0; j < urlTree.child(0)
                                    .numberOfChildren(); j++) {
                                if (urlTree.child(0).child(j).label()
                                        .equals("item")) {
                                    processItem(urlTree.child(0).child(j),
                                            fileContent);
                                }
                            }
                            outputFooter(fileContent);
                        } else {
                            out.print("Feed " + i + " has no file attribute");
                        }
                    } else {
                        out.print("Feed " + i + " has no name attribute");
                    }
                } else {
                    out.print("Feed " + i + " has no url attribute");
                }
            }
        }
        output.println("</ul>");
        output.println("</body>");
        output.print("</html>");
        output.close();
    }

    /**
     * Main method. Creates new HTML file and prints necessary content to that
     * file.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        out.print("Input XML File url: ");
        String url = in.nextLine();
        out.print("Enter file name for html: ");
        String name = in.nextLine();
        processFeed(url, name, out);
        in.close();
        out.close();
    }
}
